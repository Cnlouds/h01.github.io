---
category:    [编程笔记,nodejs]
layout:      post
title:       socket.io的简单使用
desc:        socket.io 是一个为实时应用提供跨平台实时通信的库。简记如何与Node.js完美搭配使用
tags:        [Javascript,socket.io,socket.io.js使用,node.js Websocket]
---
具体的介绍就不说了，在服务端安装命令：
{% highlight bash linenos %}
npm install socket.io
{% endhighlight %}

安装完毕我们本地监听一个`web`端口用于和用户交互以及通信：
{% highlight js linenos %}
var io = require("socket.io").listen(8888);

function debug(msg){
    console.log('[-] %s', msg);
}

io.sockets.on('connection', function(socket){
    debug("主机连接:" + socket.handshake.address);

    socket.on('msg', function(msg){
        debug("收到信息:" + msg.msg);
        io.sockets.emit('msg', {
            msg: socket.handshake.address + " 发送消息: " + msg.msg
        });
    });

    socket.on('disconnection', function(){
        debug("主机断开:" + socket.handshake.address);
    });

    socket.emit('msg', {
        msg: '你好aaa'
    });
});
{% endhighlight %}

然后客户端调用`web`的`socket.io.js`，或者直接调用外部`cdn`的`js`文件，进行和客户端通信：
{% highlight js linenos %}
<script src="http://localhost:8888/socket.io/socket.io.js"></script>
<script type="text/javascript">
var socket = io.connect("http://localhost:8888");
socket.on("msg", function(msg){
    console.log("[+] " + msg.msg);
});
socket.emit("msg", {
    msg: "Hello!!!"
});
</script>
{% endhighlight %}